{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","film","setFilm","searchFilm","setSearchFilm","loading","setLoading","haveError","setHaveError","handleFormSubmit","useCallback","event","query","preventDefault","fetch","then","res","json","catch","Response","Error","data","Title","Plot","Poster","imdbID","finally","handleSearch","target","value","addFilmToList","onSubmit","htmlFor","type","id","placeholder","onChange","classNames","disabled","onClick","App","setMovies","find","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"8TAQaA,EAAgCC,gBAAK,gBAAGC,EAAK,EAALA,MAAK,OACxD,sBAAKC,UAAU,OAAO,UAAQ,YAAW,UACvC,qBAAKA,UAAU,aAAY,SACzB,wBAAQA,UAAU,gBAAe,SAC/B,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAc,UAC3B,sBAAKA,UAAU,QAAO,UACpB,qBAAKA,UAAU,aAAY,SACzB,wBAAQA,UAAU,iBAAgB,SAChC,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAe,SAC5B,mBAAGA,UAAU,aAAa,UAAQ,aAAY,SAAED,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAkB,UAChDD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAU,8BC3BrCC,EAAiCV,gBAAK,gBAAGW,EAAM,EAANA,OAAM,OAC1D,qBAAKT,UAAU,SAAQ,SACpBS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAS,CAERA,MAAOA,GADFA,EAAMY,gB,0BCINC,EAAgCd,gBAAK,YAAmB,IAAhBe,EAAQ,EAARA,SACnD,EAAwBC,mBAAuB,MAAK,mBAA7CC,EAAI,KAAEC,EAAO,KACpB,EAAoCF,mBAAS,IAAG,mBAAzCG,EAAU,KAAEC,EAAa,KAChC,EAA8BJ,oBAAS,GAAM,mBAAtCK,EAAO,KAAEC,EAAU,KAC1B,EAAkCN,oBAAS,GAAM,mBAA1CO,EAAS,KAAEC,EAAY,KAExBC,EAAmBC,uBAAY,SAACC,GCnBjC,IAAkBC,EDoBrBD,EAAME,iBAENP,GAAW,ICtBUM,EDwBZT,ECvBJW,MAAM,GAAD,OAHE,sDAGS,cAAMF,IAC1BG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,wBDoBNL,MAAK,SAAAM,GACJ,MAAI,UAAWA,EACNb,GAAa,GAGfN,EACL,CACEZ,MAAO+B,EAAKC,MACZ/B,YAAa8B,EAAKE,KAClBnC,OAAwB,QAAhBiC,EAAKG,OACTH,EAAKG,OACL,4DACJ/B,QAAQ,8BAAD,OAAgC4B,EAAKI,QAC5C5B,OAAQwB,EAAKI,YAIlBC,SAAQ,kBAAMpB,GAAW,QAC3B,CAACH,IAEEwB,EAAejB,uBAAY,SAACC,GAChCP,EAAcO,EAAMiB,OAAOC,OAC3BrB,GAAa,KACZ,CAACL,EAAYI,IAEVuB,EAAgBpB,uBAAY,WAC5BT,GACFF,EAASE,GAGXC,EAAQ,MACRE,EAAc,MACb,CAACH,EAAMF,IAEV,OACE,qCACE,uBAAMb,UAAU,aAAa6C,SAAUtB,EAAiB,UACtD,sBAAKvB,UAAU,QAAO,UACpB,uBAAOA,UAAU,QAAQ8C,QAAQ,cAAa,yBAI9C,qBAAK9C,UAAU,UAAS,SACtB,uBACE,UAAQ,aACR+C,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZjD,UAAU,kBACV2C,MAAO1B,EACPiC,SAAUT,MAIbpB,GACC,mBAAGrB,UAAU,iBAAiB,UAAQ,eAAc,qDAMxD,sBAAKA,UAAU,mBAAkB,UAC/B,qBAAKA,UAAU,UAAS,SACtB,wBACE,UAAQ,eACR+C,KAAK,SACL/C,UAAWmD,IAAW,mBAAoB,CACxC,aAAchC,IAEhBiC,UAAWnC,EAAW,SAErBF,EAAO,eAAiB,mBAI5BA,GACC,qBAAKf,UAAU,UAAS,SACtB,wBACE,UAAQ,YACR+C,KAAK,SACL/C,UAAU,oBACVqD,QAAST,EAAc,qCAShC7B,GACC,sBAAKf,UAAU,YAAY,UAAQ,mBAAkB,UACnD,oBAAIA,UAAU,QAAO,qBACrB,cAAC,EAAS,CAACD,MAAOgB,aErHfuC,EAAM,WACjB,MAA4BxC,mBAAkB,IAAG,mBAA1CL,EAAM,KAAE8C,EAAS,KAElB1C,EAAWW,uBAAY,SAACzB,GACvBU,EAAO+C,MAAK,SAAAzC,GAAI,OAAIhB,EAAMY,SAAWI,EAAKJ,WAC7C4C,GAAU,SAAAE,GAAU,4BAAQA,GAAU,CAAE1D,SAG5C,CAACU,IAED,OACE,sBAAKT,UAAU,OAAM,UACnB,qBAAKA,UAAU,eAAc,SAC3B,cAAC,EAAU,CAACS,OAAQA,MAGtB,qBAAKT,UAAU,UAAS,SACtB,cAAC,EAAS,CAACa,SAAUA,UCnB7B6C,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,W","file":"static/js/main.07b8c50a.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype MovieCardProps = {\n  movie: Movie,\n};\n\nexport const MovieCard: FC<MovieCardProps> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import { FC, memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype MovieListProps = {\n  movies: Movie[];\n};\n\nexport const MoviesList: FC<MovieListProps> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import classNames from 'classnames';\nimport {\n  ChangeEvent,\n  FC,\n  FormEvent,\n  memo,\n  useCallback,\n  useState,\n} from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype FindMovieProps = {\n  addMovie: (movie:Movie) => void;\n};\n\nexport const FindMovie: FC<FindMovieProps> = memo(({ addMovie }) => {\n  const [film, setFilm] = useState<Movie | null>(null);\n  const [searchFilm, setSearchFilm] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [haveError, setHaveError] = useState(false);\n\n  const handleFormSubmit = useCallback((event: FormEvent) => {\n    event.preventDefault();\n\n    setLoading(true);\n\n    getMovie(searchFilm)\n      .then(data => {\n        if ('Error' in data) {\n          return setHaveError(true);\n        }\n\n        return setFilm(\n          {\n            title: data.Title,\n            description: data.Plot,\n            imgUrl: data.Poster !== 'N/A'\n              ? data.Poster\n              : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n            imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n            imdbId: data.imdbID,\n          },\n        );\n      })\n      .finally(() => setLoading(false));\n  }, [searchFilm]);\n\n  const handleSearch = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setSearchFilm(event.target.value);\n    setHaveError(false);\n  }, [searchFilm, haveError]);\n\n  const addFilmToList = useCallback(() => {\n    if (film) {\n      addMovie(film);\n    }\n\n    setFilm(null);\n    setSearchFilm('');\n  }, [film, addMovie]);\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={searchFilm}\n              onChange={handleSearch}\n            />\n          </div>\n\n          {haveError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is -light', {\n                'is-loading': loading,\n              })}\n              disabled={!searchFilm}\n            >\n              {film ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {film && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addFilmToList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {film && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={film} />\n        </div>\n      )}\n    </>\n  );\n});\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=86116733';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((movie: Movie) => {\n    if (!movies.find(film => movie.imdbId === film.imdbId)) {\n      setMovies(prevMovies => [...prevMovies, movie]);\n    }\n  },\n  [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}